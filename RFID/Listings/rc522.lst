C51 COMPILER V9.57.0.0   RC522                                                             12/20/2021 22:54:57 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN .\Objects\rc522.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE rc522.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\RFID) DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\rc522.lst) TABS(2) OBJECT(.\Objects\rc522.obj)

line level    source

   1          #include <reg52.h>
   2          #include <rc522.h>
   3          #include <intrins.h>
   4          #include <string.h>
   5          sbit MF522_SDA  =    P3^7;    
   6          sbit MF522_SCK  =    P3^6;
   7          sbit MF522_SI   =    P3^5;
   8          sbit MF522_SO   =    P3^4;
   9          sbit MF522_RST  =    P3^3;
  10          
  11          
  12          /////////////////////////////////////////////////////////////////////
  13          
  14          //功    能：寻卡
  15          //参数说明: req_code[IN]:寻卡方式
  16          //                0x52 = 寻感应区内所有符合14443A标准的卡
  17          //                0x26 = 寻未进入休眠状态的卡
  18          //          pTagType[OUT]：卡片类型代码
  19          //                0x4400 = Mifare_UltraLight
  20          //                0x0400 = Mifare_One(S50)
  21          //                0x0200 = Mifare_One(S70)
  22          //                0x0800 = Mifare_Pro(X)
  23          //                0x4403 = Mifare_DESFire
  24          //返    回: 成功返回MI_OK
  25          /////////////////////////////////////////////////////////////////////
  26          char PcdRequest(unsigned char req_code,unsigned char *pTagType){
  27   1         char status;  
  28   1         unsigned int  unLen;
  29   1         unsigned char ucComMF522Buf[18]; 
  30   1         ClearBitMask(Status2Reg,0x08);
  31   1         WriteRawRC(BitFramingReg,0x07);
  32   1         SetBitMask(TxControlReg,0x03);
  33   1         ucComMF522Buf[0] = req_code;
  34   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  35   1         if ((status == MI_OK) && (unLen == 0x10))
  36   1         {    
  37   2             *pTagType     = ucComMF522Buf[0];
  38   2             *(pTagType+1) = ucComMF522Buf[1];
  39   2         }
  40   1         else
  41   1         {   status = MI_ERR;   }   
  42   1         return status;
  43   1      }
  44          
  45          /////////////////////////////////////////////////////////////////////
  46          //功    能：防冲撞
  47          //参数说明: pSnr[OUT]:卡片序列号，4字节
  48          //返    回: 成功返回MI_OK
  49          /////////////////////////////////////////////////////////////////////  
  50          char PcdAnticoll(unsigned char *pSnr)
  51          {
  52   1          char status;
  53   1          unsigned char i,snr_check=0;
  54   1          unsigned int  unLen;
C51 COMPILER V9.57.0.0   RC522                                                             12/20/2021 22:54:57 PAGE 2   

  55   1          unsigned char ucComMF522Buf[18]; 
  56   1          
  57   1      
  58   1          ClearBitMask(Status2Reg,0x08);
  59   1          WriteRawRC(BitFramingReg,0x00);
  60   1          ClearBitMask(CollReg,0x80);
  61   1       
  62   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  63   1          ucComMF522Buf[1] = 0x20;
  64   1      
  65   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  66   1      
  67   1          if (status == MI_OK)
  68   1          {
  69   2             for (i=0; i<4; i++)
  70   2               {   
  71   3                   *(pSnr+i)  = ucComMF522Buf[i];
  72   3                   snr_check ^= ucComMF522Buf[i];
  73   3               }
  74   2               if (snr_check != ucComMF522Buf[i])
  75   2               {   status = MI_ERR;    }
  76   2          }
  77   1          
  78   1          SetBitMask(CollReg,0x80);
  79   1          return status;
  80   1      }
  81          
  82          /////////////////////////////////////////////////////////////////////
  83          //功    能：复位RC522
  84          //返    回: 成功返回MI_OK
  85          /////////////////////////////////////////////////////////////////////
  86          char PcdReset(void){
  87   1          MF522_RST=1;
  88   1          _nop_();//空机器指令
  89   1          MF522_RST=0;
  90   1          _nop_();
  91   1          MF522_RST=1;
  92   1           _nop_();
  93   1          WriteRawRC(CommandReg,PCD_RESETPHASE); //往寄出去地址01，写0x0F
  94   1        _nop_();
  95   1            
  96   1      
  97   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363，CRCPreset=01
  98   1          WriteRawRC(TReloadRegL,30);          //定时器重装值，分为两个8位寄存器，初始值都为0x00      
  99   1          WriteRawRC(TReloadRegH,0);
 100   1          WriteRawRC(TModeReg,0x8D);           //内部定时器的设置1000 1101,后四位为TPrescalerReg的高四位
 101   1          WriteRawRC(TPrescalerReg,0x3E);      //为TPregScaler低8位，Ftimer = 6.78MHZ/TPreScaler
 102   1          WriteRawRC(TxAutoReg,0x40);     
 103   1          return MI_OK;
 104   1      }
 105          //////////////////////////////////////////////////////////////////////
 106          //设置RC522的工作方式 
 107          //////////////////////////////////////////////////////////////////////
 108          
 109          char M500PcdConfigISOType(unsigned char type){
 110   1         if (type == 'A')                     //ISO14443_A
 111   1         { 
 112   2             ClearBitMask(Status2Reg,0x08);
 113   2             WriteRawRC(ModeReg,0x3D);//3
 114   2             WriteRawRC(RxSelReg,0x86);//
 115   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 116   2             WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
C51 COMPILER V9.57.0.0   RC522                                                             12/20/2021 22:54:57 PAGE 3   

 117   2           WriteRawRC(TReloadRegH,0);
 118   2             WriteRawRC(TModeReg,0x8D);
 119   2           WriteRawRC(TPrescalerReg,0x3E);
 120   2      //      delay10ms(1);
 121   2             PcdAntennaOn();
 122   2         }
 123   1         else{ return -1; }
 124   1         
 125   1         return MI_OK;
 126   1      }
 127          /////////////////////////////////////////////////////////////////////
 128          //功    能：清RC522寄存器位
 129          //参数说明：reg[IN]:寄存器地址
 130          //          mask[IN]:清位值
 131          /////////////////////////////////////////////////////////////////////
 132          
 133          void ClearBitMask(unsigned char reg,unsigned char mask)  
 134          {
 135   1          char tmp = 0x0;
 136   1          tmp = ReadRawRC(reg);
 137   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 138   1      }
 139          
 140          /////////////////////////////////////////////////////////////////////
 141          //功    能：读RC522寄存器
 142          //参数说明：Address[IN]:寄存器地址
 143          //返    回：读出的值
 144          /////////////////////////////////////////////////////////////////////
 145          
 146          unsigned char ReadRawRC(unsigned char Address){
 147   1           unsigned char i, ucAddr;
 148   1           unsigned char ucResult=0;
 149   1      
 150   1           MF522_SCK = 0;
 151   1           MF522_SDA= 0;
 152   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 153   1      
 154   1           for(i=8;i>0;i--)
 155   1           {
 156   2               MF522_SI = ((ucAddr&0x80)==0x80);
 157   2               MF522_SCK = 1;
 158   2               ucAddr <<= 1;
 159   2               MF522_SCK = 0;
 160   2           }
 161   1      
 162   1           for(i=8;i>0;i--)
 163   1           {
 164   2               MF522_SCK = 1;
 165   2               ucResult <<= 1;
 166   2               ucResult|=(bit)MF522_SO;
 167   2               MF522_SCK = 0;
 168   2           }
 169   1      
 170   1           MF522_SDA = 1;
 171   1           MF522_SCK = 1;
 172   1           return ucResult;
 173   1      } 
 174          
 175          /////////////////////////////////////////////////////////////////////
 176          //功    能：写RC522寄存器
 177          //参数说明：Address[IN]:寄存器地址
 178          //          value[IN]:写入的值
C51 COMPILER V9.57.0.0   RC522                                                             12/20/2021 22:54:57 PAGE 4   

 179          /////////////////////////////////////////////////////////////////////
 180          
 181          void WriteRawRC(unsigned char Address, unsigned char value){  
 182   1          unsigned char i, ucAddr;
 183   1      
 184   1          MF522_SCK = 0;
 185   1          MF522_SDA = 0;
 186   1          ucAddr = ((Address<<1)&0x7E);
 187   1      
 188   1          for(i=8;i>0;i--)
 189   1          {
 190   2              MF522_SI = ((ucAddr&0x80)==0x80);
 191   2              MF522_SCK = 1;
 192   2              ucAddr <<= 1;
 193   2              MF522_SCK = 0;
 194   2          }
 195   1      
 196   1          for(i=8;i>0;i--)
 197   1          {
 198   2              MF522_SI = ((value&0x80)==0x80);
 199   2              MF522_SCK = 1;
 200   2              value <<= 1;
 201   2              MF522_SCK = 0;
 202   2          }
 203   1          MF522_SDA = 1;
 204   1          MF522_SCK = 1;
 205   1      }
 206          
 207          /////////////////////////////////////////////////////////////////////
 208          //功    能：置RC522寄存器位
 209          //参数说明：reg[IN]:寄存器地址
 210          //          mask[IN]:置位值
 211          /////////////////////////////////////////////////////////////////////
 212          void SetBitMask(unsigned char reg,unsigned char mask)  
 213          {
 214   1          char tmp = 0x0;
 215   1          tmp = ReadRawRC(reg);
 216   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 217   1      }
 218          
 219          
 220          
 221          /////////////////////////////////////////////////////////////////////
 222          //功    能：通过RC522和ISO14443卡通讯
 223          //参数说明：Command[IN]:RC522命令字
 224          //          pInData[IN]:通过RC522发送到卡片的数据
 225          //          InLenByte[IN]:发送数据的字节长度
 226          //          pOutData[OUT]:接收到的卡片返回数据
 227          //          *pOutLenBit[OUT]:返回数据的位长度
 228          /////////////////////////////////////////////////////////////////////
 229          char PcdComMF522(unsigned char Command, 
 230                           unsigned char *pInData, 
 231                           unsigned char InLenByte,
 232                           unsigned char *pOutData, 
 233                           unsigned int  *pOutLenBit)
 234          {
 235   1          char status = MI_ERR;
 236   1          unsigned char irqEn   = 0x00;
 237   1          unsigned char waitFor = 0x00;
 238   1          unsigned char lastBits;
 239   1          unsigned char n;
 240   1          unsigned int i;
C51 COMPILER V9.57.0.0   RC522                                                             12/20/2021 22:54:57 PAGE 5   

 241   1          switch (Command)
 242   1          {
 243   2             case PCD_AUTHENT:
 244   2                irqEn   = 0x12;
 245   2                waitFor = 0x10;
 246   2                break;
 247   2             case PCD_TRANSCEIVE:
 248   2                irqEn   = 0x77;
 249   2                waitFor = 0x30;
 250   2                break;
 251   2             default:
 252   2               break;
 253   2          }
 254   1         
 255   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 256   1          ClearBitMask(ComIrqReg,0x80);
 257   1          WriteRawRC(CommandReg,PCD_IDLE);
 258   1          SetBitMask(FIFOLevelReg,0x80);
 259   1          
 260   1          for (i=0; i<InLenByte; i++)
 261   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 262   1          WriteRawRC(CommandReg, Command);
 263   1         
 264   1          
 265   1          if (Command == PCD_TRANSCEIVE)
 266   1          {    SetBitMask(BitFramingReg,0x80);  }
 267   1          
 268   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 269   1       i = 2000;//900,1100,1700,2000,2700
 270   1          do 
 271   1          {
 272   2               n = ReadRawRC(ComIrqReg);
 273   2               i--;
 274   2          }
 275   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 276   1          ClearBitMask(BitFramingReg,0x80);
 277   1              
 278   1          if (i!=0)
 279   1          {    
 280   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 281   2               {
 282   3                   status = MI_OK;
 283   3                   if (n & irqEn & 0x01)
 284   3                   {   status = MI_NOTAGERR;   }
 285   3                   if (Command == PCD_TRANSCEIVE)
 286   3                   {
 287   4                      n = ReadRawRC(FIFOLevelReg);
 288   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 289   4                      if (lastBits)
 290   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 291   4                      else
 292   4                      {   *pOutLenBit = n*8;   }
 293   4                      if (n == 0)
 294   4                      {   n = 1;    }
 295   4                      if (n > 18)
 296   4                      {   n = 18;   }
 297   4                      for (i=0; i<n; i++)
 298   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 299   4              
 300   4                  }
 301   3               }
 302   2               else
C51 COMPILER V9.57.0.0   RC522                                                             12/20/2021 22:54:57 PAGE 6   

 303   2               {   status = MI_ERR;   }
 304   2         }
 305   1         
 306   1      
 307   1         SetBitMask(ControlReg,0x80);           // stop timer now
 308   1         WriteRawRC(CommandReg,PCD_IDLE); 
 309   1         return status;
 310   1      }
 311          
 312          
 313          /////////////////////////////////////////////////////////////////////
 314          //开启天线  
 315          //每次启动或关闭天险发射之间应至少有1ms的间隔
 316          /////////////////////////////////////////////////////////////////////
 317          void PcdAntennaOn(){
 318   1          unsigned char i;
 319   1          i = ReadRawRC(TxControlReg);
 320   1          if (!(i & 0x03))
 321   1          {
 322   2              SetBitMask(TxControlReg, 0x03);
 323   2          }
 324   1      }
 325          
 326          
 327          /////////////////////////////////////////////////////////////////////
 328          //关闭天线
 329          /////////////////////////////////////////////////////////////////////
 330          void PcdAntennaOff()
 331          {
 332   1          ClearBitMask(TxControlReg, 0x03);
 333   1      }
 334          
 335          
 336          
 337          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    918    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      68
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
